[
["index.html", "R Code for Mastering ’Metrics Welcome", " R Code for Mastering ’Metrics Jeffrey B. Arnold Calvin H. Garner Welcome This work contains R code to reproduce many of the analyses in Mastering ’Metrics by Joshua D. Angrist and Jörn-Steffen Pischke, derived from the Stata code provided on masteringmetrics.com. The text of this work is licensed under the Creative Commons Attribution 4.0 International License. The R Code in this work is licensed under the MIT License. "],
["table-1-1.html", "1 Table 1.1", " 1 Table 1.1 This reproduces the analyses in Table 1.1, which compares people with and without health insurance in the 2009 National Health Interview Survey (NHIS). The code is derived from NHIS2009_hicompare.do. Load the prerequisite packages. library(&quot;tidyverse&quot;) library(&quot;magrittr&quot;) library(&quot;haven&quot;) Load the data (originally from http://masteringmetrics.com/wp-content/uploads/2015/01/Data.zip), and adjust a few of the columns to account for differences in how STATA and R store data. NHIS2009_clean &lt;- read_dta(&quot;data/NHIS/Data/NHIS2009_clean.dta&quot;) %&gt;% mutate(age = as.numeric(age), serial = as.integer(serial), fml = as.logical(fml), marradult = as.logical(marradult)) Remove missing values. NHIS2009_clean &lt;- NHIS2009_clean %&gt;% filter(marradult, perweight != 0) %&gt;% group_by(serial) %&gt;% mutate(hi_hsb = mean(hi_hsb1, na.rm = TRUE)) %&gt;% filter(!is.na(hi_hsb), !is.na(hi)) %&gt;% mutate(female = sum(fml)) %&gt;% filter(female == 1) %&gt;% select(-female) For the sample only include married adults between 26 and 59 in age, and remove single person households. NHIS2009_clean &lt;- NHIS2009_clean %&gt;% filter(between(age, 26, 59), marradult, adltempl &gt;= 1) Keep only single family households. NHIS2009_clean &lt;- NHIS2009_clean %&gt;% group_by(serial) %&gt;% filter(length(serial) &gt; 1L) %&gt;% ungroup() Tables of wives and husbands by health insurance. status. The weighting following the “analytic” weights in the original .do file which weights observations by perweight and normalizes the weights so that the sub-samples of males and females have the same number as the original sample. NHIS2009_clean %&gt;% group_by(fml) %&gt;% # normalize person weights to match number of observations in each # group mutate(perweight = perweight / sum(perweight) * n()) %&gt;% group_by(fml, hi) %&gt;% summarise(n_wt = sum(perweight)) %&gt;% group_by(fml) %&gt;% mutate(prop = n_wt / sum(n_wt)) #&gt; # A tibble: 4 x 4 #&gt; # Groups: fml [2] #&gt; fml hi n_wt prop #&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 FALSE 0. 1281. 0.136 #&gt; 2 FALSE 1. 8114. 0.864 #&gt; 3 TRUE 0. 1131. 0.120 #&gt; 4 TRUE 1. 8264. 0.880 Compare sample statistics of mean and women, with and without health insurance. varlist &lt;- c(&quot;hlth&quot;, &quot;nwhite&quot;, &quot;age&quot;, &quot;yedu&quot;, &quot;famsize&quot;, &quot;empl&quot;, &quot;inc&quot;) NHIS2009_clean %&gt;% # rlang::set_attrs with NULL removes attributes from columns. # this avoids a warning from gather about differing attributes map_dfc(~ rlang::set_attrs(.x, NULL)) %&gt;% select(fml, hi, one_of(varlist)) %&gt;% gather(variable, value, -fml, -hi) %&gt;% group_by(fml, hi, variable) %&gt;% summarise(mean = mean(value, na.rm = TRUE), sd = sd(value, na.rm = TRUE)) %&gt;% gather(stat, value, -fml, -hi, -variable) %&gt;% unite(stat_hi, stat, hi) %&gt;% spread(stat_hi, value) %&gt;% mutate(diff = mean_1 - mean_0) #&gt; # A tibble: 14 x 7 #&gt; # Groups: fml [2] #&gt; fml variable mean_0 mean_1 sd_0 sd_1 diff #&gt; &lt;lgl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 FALSE age 41.3 44.2 8.40 8.61 2.89 #&gt; 2 FALSE empl 0.852 0.922 0.355 0.268 0.0701 #&gt; 3 FALSE famsize 4.06 3.55 1.54 1.32 -0.506 #&gt; 4 FALSE hlth 3.70 3.98 1.01 0.934 0.278 #&gt; 5 FALSE inc 43636. 104002. 35690. 54815. 60366. #&gt; 6 FALSE nwhite 0.188 0.200 0.391 0.400 0.0115 #&gt; # ... with 8 more rows "],
["tables-1-3-and-1-4.html", "2 Tables 1.3 and 1.4 2.1 Table 1.3 2.2 Table 1.4", " 2 Tables 1.3 and 1.4 Load necessary libraries. library(&quot;tidyverse&quot;) library(&quot;broom&quot;) library(&quot;haven&quot;) library(&quot;rlang&quot;) 2.1 Table 1.3 rand_filename &lt;- here::here(&quot;data&quot;, &quot;RAND&quot;, &quot;Data&quot;, &quot;rand_initial_sample_2.dta&quot;) rand &lt;- read_dta(rand_filename) %&gt;% # delete Stata attributes map_dfc(~ rlang::set_attrs(.x, NULL)) The plantype variable takes four values, 1 Free 2 Deductible 3 Coinsurance 4 Catastrophic Create a more interpretable version of plantype, and ensure that the free plan does not give 0’s to anyone without a plan. rand &lt;- rand %&gt;% filter(!is.na(plantype)) %&gt;% # plantype to a factor variable mutate(plantype = factor(plantype, labels = c(&quot;Free&quot;, &quot;Deductible&quot;, &quot;Coinsurance&quot;, &quot;Catastrophic&quot;))) %&gt;% # reorder so that &quot;Catastrophic is first mutate(plantype = fct_relevel(plantype, &quot;Catastrophic&quot;, &quot;Deductible&quot;, &quot;Coinsurance&quot;, &quot;Free&quot;)) %&gt;% # indicator variable for any insurance mutate(any_ins = plantype != &quot;Catastrophic&quot;) Calculate the number in each plan: plantypes &lt;- count(rand, plantype) knitr::kable(plantypes) plantype n Catastrophic 759 Deductible 881 Coinsurance 1022 Free 1295 For variables, difference in means between plantypes varlist &lt;- c(&quot;female&quot;, &quot;blackhisp&quot;, &quot;age&quot;, &quot;educper&quot;, &quot;income1cpi&quot;, &quot;hosp&quot;, &quot;ghindx&quot;, &quot;cholest&quot;, &quot;diastol&quot;, &quot;systol&quot;, &quot;mhi&quot;, &quot;ghindxx&quot;, &quot;cholestx&quot;, &quot;diastolx&quot;, &quot;systolx&quot;, &quot;mhix&quot;) Create column (1) with the mean and standard deviation of the “Catastrophic” plan, catastrophic_stats &lt;- rand %&gt;% filter(plantype == &quot;Catastrophic&quot;) %&gt;% select(one_of(varlist)) %&gt;% gather(variable, value) %&gt;% group_by(variable) %&gt;% summarise(Mean = mean(value, na.rm = TRUE), `Std. Dev.` = sd(value, na.rm = TRUE)) knitr::kable(catastrophic_stats, digits = 3) variable Mean Std. Dev. age 3.24e+01 1.29e+01 blackhisp 1.72e-01 3.77e-01 cholest 2.07e+02 3.99e+01 cholestx 2.03e+02 4.21e+01 diastol 7.48e+01 1.10e+01 diastolx 7.88e+01 1.20e+01 educper 1.21e+01 2.88e+00 female 5.60e-01 4.97e-01 ghindx 7.09e+01 1.49e+01 ghindxx 6.85e+01 1.59e+01 hosp 1.15e-01 3.20e-01 income1cpi 3.16e+04 1.81e+04 mhi 7.38e+01 1.43e+01 mhix 7.55e+01 1.48e+01 systol 1.22e+02 1.65e+01 systolx 1.22e+02 1.87e+01 The difference in means between plans and the catastophic plan. calc_diffs &lt;- function(x) { # programmatically create the formula f &lt;- quo(!!sym(x) ~ plantype) # this would also work # f &lt;- as.formula(str_c(x, &quot; ~ plantype_1 + plantype_2 + plantype_3&quot;)) mod &lt;- lm(f, data = rand) out &lt;- tidy(mod) out[[&quot;response&quot;]] &lt;- x out } x_diffs &lt;- map_dfr(varlist, calc_diffs) %&gt;% select(response, term, estimate, std.error) %&gt;% mutate(term = str_replace(term, &quot;^plantype&quot;, &quot;&quot;)) Note: the above code currently does not cluster by family ID as in the original analysis so the standard errors will be different. Print the table. This could be done much nicer, … but for now. fmt_num &lt;- function(x) { prettyNum(x, digits = 3, format = &quot;f&quot;, big.mark = &quot;,&quot;, drop0trailing = FALSE) } x_diffs %&gt;% mutate(estimate = str_c(fmt_num(estimate), &quot; (&quot;, fmt_num(std.error), &quot;)&quot;)) %&gt;% select(-std.error) %&gt;% spread(term, estimate) %&gt;% knitr::kable(digits = 3) response (Intercept) Coinsurance Deductible Free age 32.4 (0.479) 0.966 (0.632) 0.561 (0.654) 0.435 (0.603) blackhisp 0.172 (0.0146) -0.0269 (0.0192) -0.0188 (0.0199) -0.0281 (0.0186) cholest 207 (2.07) -1.93 (2.76) -1.42 (2.82) -5.25 (2.59) cholestx 203 (1.77) -2.31 (2.3) 0.691 (2.4) -1.83 (2.19) diastol 74.8 (0.55) -0.514 (0.73) 1.22 (0.747) -0.143 (0.685) diastolx 78.8 (0.473) -0.335 (0.615) 0.219 (0.641) -1.03 (0.585) educper 12.1 (0.116) -0.0613 (0.153) -0.157 (0.157) -0.263 (0.146) female 0.56 (0.0181) -0.0247 (0.0239) -0.0231 (0.0247) -0.0379 (0.0228) ghindx 70.9 (0.651) 0.211 (0.863) -1.44 (0.844) -1.31 (0.801) ghindxx 68.5 (0.604) 0.612 (0.785) -0.869 (0.82) -0.776 (0.745) hosp 0.115 (0.0117) -0.00249 (0.0154) 0.00449 (0.0159) 0.00117 (0.0147) income1cpi 31,603 (651) 970 (857) -2,104 (891) -976 (819) mhi 73.8 (0.515) 1.19 (0.677) -0.12 (0.7) 0.89 (0.648) mhix 75.5 (0.542) 1.07 (0.705) 0.454 (0.735) 0.433 (0.669) systol 122 (0.797) 0.907 (1.06) 2.32 (1.08) 1.12 (0.993) systolx 122 (0.715) -1.39 (0.929) 1.17 (0.969) -0.522 (0.885) Plot the difference-in-means of each plantype vs. catastrophic insurance. ggplot(filter(x_diffs, term != &quot;(Intercept)&quot;), aes(x = term, y = estimate, ymin = estimate - 2 * std.error, ymax = estimate + 2 * std.error)) + geom_hline(yintercept = 0, colour = &quot;white&quot;, size = 1) + geom_pointrange() + facet_grid(response ~ . , scales = &quot;free_y&quot;) 2.2 Table 1.4 Load person-year health insurance data. person_years_file &lt;- here::here(&quot;data&quot;, &quot;RAND&quot;, &quot;Data&quot;, &quot;person_years.dta&quot;) person_years &lt;- read_dta(person_years_file) %&gt;% map_dfc(~ rlang::set_attrs(.x, NULL)) Load annual spending on hospital visits data. annual_spend_file &lt;- here::here(&quot;data&quot;, &quot;RAND&quot;, &quot;Data&quot;, &quot;annual_spend.dta&quot;) annual_spend &lt;- read_dta(annual_spend_file) %&gt;% map_dfc(~ rlang::set_attrs(.x, NULL)) Inner join the person-year and annual-spending data on person identifiers and years, person_spend &lt;- inner_join(person_years, annual_spend, by = c(&quot;person&quot;, &quot;year&quot;)) There are four types of plans in RAND experiment. Free, Individual Deductible Cost Sharing (25%/50%) Catostrophic (Fam Deductible) (95%/100%) Create a categorical variable with these categories. person_spend &lt;- mutate(person_spend, plantype = case_when( plan == 24 ~ &quot;Free&quot;, plan %in% c(1, 5) ~ &quot;Deductible&quot;, plan &gt;= 2 &amp; plan &lt;= 4 ~ &quot;Catastrophic&quot;, plan &gt;= 6 &amp; plan &lt;= 8 ~ &quot;Catastrophic&quot;, plan &gt;= 9 &amp; plan &lt;= 23 ~ &quot;Cost Sharing&quot; )) %&gt;% # reorder levels so Catastrophic is first mutate(plantype = fct_relevel(plantype, &quot;Catastrophic&quot;, &quot;Deductible&quot;, &quot;Cost Sharing&quot;, &quot;Free&quot;)) correlate year variable from annual expenditures data to correct calendar year in order to adjust for inflation. person_spend &lt;- mutate(person_spend, expyear = indv_start_year + year - 1) Adjust spending for inflation. The CPI adjustment values below are based on the June CPI from 1991 (see table found at http://www.seattle.gov/financedepartment/cpi/historical.htm ). cpi &lt;- tribble( ~ year, ~ cpi, 1973, 3.07, 1974, 2.76, 1975, 2.53, 1976, 2.39, 1977, 2.24, 1978, 2.09, 1979, 1.88, 1980, 1.65, 1981, 1.5, 1982, 1.41, 1983, 1.37, 1984, 1.31, 1985, 1.27 ) person_spend &lt;- left_join(person_spend, cpi, by = c(&quot;expyear&quot; = &quot;year&quot;)) %&gt;% mutate(out_inf = outsum * cpi, inpdol_inf = inpdol * cpi) Add a total spending variable. person_spend &lt;- mutate(person_spend, tot_inf = inpdol_inf + out_inf) Add a variable for any health insurance (free, Individual deductible, or cost-sharing): person_spend &lt;- mutate(person_spend, any_ins = plantype != &quot;Catastrophic&quot;) Count the number of observations in each plan-type, count(person_spend, plantype) #&gt; # A tibble: 4 x 2 #&gt; plantype n #&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Catastrophic 3724 #&gt; 2 Deductible 4175 #&gt; 3 Cost Sharing 5464 #&gt; 4 Free 6840 and any-insurance, count(person_spend, any_ins) #&gt; # A tibble: 2 x 2 #&gt; any_ins n #&gt; &lt;lgl&gt; &lt;int&gt; #&gt; 1 FALSE 3724 #&gt; 2 TRUE 16479 Create a list of response variables. varlist &lt;- c(&quot;ftf&quot;, &quot;out_inf&quot;, &quot;totadm&quot;, &quot;inpdol_inf&quot;, &quot;tot_inf&quot;) Mean and standard deviation for those receiving catastrophic insurance, person_spend %&gt;% filter(plantype == &quot;Catastrophic&quot;) %&gt;% select(one_of(varlist)) %&gt;% gather(response, value) %&gt;% group_by(response) %&gt;% summarise(Mean = mean(value, na.rm = TRUE), `Std. Dev.` = sd(value, na.rm = TRUE)) #&gt; # A tibble: 5 x 3 #&gt; response Mean `Std. Dev.` #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 ftf 2.78 5.50 #&gt; 2 inpdol_inf 388. 2308. #&gt; 3 out_inf 248. 488. #&gt; 4 tot_inf 636. 2535. #&gt; 5 totadm 0.0991 0.379 Calculate the difference in means between plans and the catastophic plan. calc_diffs &lt;- function(x) { # programmatically create the formula f &lt;- quo_squash(quo(!!sym(x) ~ plantype)) # this would also work # f &lt;- as.formula(str_c(x, &quot; ~ plantype_1 + plantype_2 + plantype_3&quot;)) mod &lt;- lm(f, data = person_spend) out &lt;- tidy(mod) out[[&quot;response&quot;]] &lt;- x out } person_diffs &lt;- map_dfr(varlist, calc_diffs) %&gt;% select(response, term, estimate, std.error) %&gt;% mutate(term = str_replace(term, &quot;^plantype&quot;, &quot;&quot;)) Note: the above code currently does not cluster by family identifier as in the original analysis so the standard errors will be different. Print the table. If this were an actual publication, I’d make it nicer. fmt_num &lt;- function(x) { prettyNum(x, digits = 3, format = &quot;f&quot;, big.mark = &quot;,&quot;, drop0trailing = FALSE) } person_diffs %&gt;% mutate(estimate = str_c(fmt_num(estimate), &quot; (&quot;, fmt_num(std.error), &quot;)&quot;)) %&gt;% select(-std.error) %&gt;% spread(term, estimate) %&gt;% knitr::kable(digits = 3) response (Intercept) Cost Sharing Deductible Free ftf 2.78 (0.103) 0.481 (0.134) 0.193 (0.142) 1.66 (0.128) inpdol_inf 388 (49.5) 92.5 (64.2) 72.2 (68.1) 116 (61.6) out_inf 248 (9.11) 59.8 (11.8) 41.8 (12.5) 169 (11.3) tot_inf 636 (52.8) 152 (68.5) 114 (72.6) 285 (65.6) totadm 0.0991 (0.00674) 0.0023 (0.00873) 0.0159 (0.00927) 0.0288 (0.00837) Additionally we could plot the difference-in-means of each plantype vs. catastrophic insurance. ggplot(filter(person_diffs, term != &quot;(Intercept)&quot;), aes(x = term, y = estimate, ymin = estimate - 2 * std.error, ymax = estimate + 2 * std.error)) + geom_hline(yintercept = 0, colour = &quot;white&quot;, size = 1) + geom_pointrange() + facet_grid(response ~ . , scales = &quot;free_y&quot;) "],
["mlda-regression-disontinuity.html", "3 MLDA Regression Disontinuity", " 3 MLDA Regression Disontinuity MLDA Regression Discontinuity (based on data from Carpenter and Dobkin 2009) from Chapter 4 of Mastering Metrics, Table 4.1 and Figures 4.2, 4.4, and 4.5 in Mastering Metrics. These present sharp RD estimates of the effect of the minimum legal drinking age (MLDA) on mortality. Derived from master_cd_rd.do.1. See the documentation. Load libraries. library(&quot;tidyverse&quot;) library(&quot;haven&quot;) library(&quot;rlang&quot;) library(&quot;broom&quot;) Load the data from AEJfigs.dta. filename &lt;- here::here(&quot;data&quot;, &quot;AEJfigs.dta&quot;) mlda &lt;- read_dta(filename) %&gt;% map_dfc(~ set_attrs(.x, NULL)) Add an indicator variable for individuals over 21 years of age. mlda &lt;- mutate(mlda, age = agecell - 21, over21 = as.integer(agecell &gt;= 21)) Add a variable for other causes of death. mlda &lt;- mutate(mlda, ext_oth = external - homicide - suicide - mva) For “all causes”, “motor vehicle accidents”, and “internal causes” plot the linear and quadratic trends on each side of 21. varlist &lt;- c(&quot;all&quot; = &quot;All Causes&quot;, &quot;mva&quot; = &quot;Motor Vehicle Accidents&quot;, &quot;internal&quot; = &quot;Internal Causes&quot;) mlda %&gt;% select(agecell, over21, one_of(names(varlist))) %&gt;% gather(response, value, -agecell, -over21, na.rm = TRUE) %&gt;% mutate(response = recode(response, !!!as.list(varlist))) %&gt;% ggplot(aes(x = agecell, y = value)) + geom_point() + geom_smooth(mapping = aes(group = over21), se = FALSE, method = &quot;lm&quot;, formula = y ~ poly(x, 2)) + geom_smooth(mapping = aes(group = over21), se = FALSE, method = &quot;lm&quot;, formula = y ~ x, color = &quot;black&quot;) + facet_grid(response ~ ., scales = &quot;free_y&quot;) + labs(y = &quot;Mortality rate (per 100,000)&quot;, x = &quot;Age&quot;) responses &lt;- c(&quot;mva&quot;, &quot;suicide&quot;, &quot;homicide&quot;, &quot;ext_oth&quot;, &quot;internal&quot;, &quot;alcohol&quot;) Function to run four regressions for a given response run_reg &lt;- function(y) { mods &lt;- list( &quot;Ages 19-22, Linear&quot; = lm(quo(!!sym(y) ~ age * over21), data = mlda), &quot;Ages 19-22, Quadratic&quot; = lm(quo(!!sym(y) ~ poly(age, 2, raw = TRUE) * over21), data = mlda), &quot;Ages 20-21, Linear&quot; = lm(quo(!!sym(y) ~ age * over21), data = filter(mlda, agecell &gt;= 20, agecell &lt;= 22)), &quot;Ages 20-21, Quadratic&quot; = lm(quo(!!sym(y) ~ poly(age, 2, raw = TRUE) * over21), data = filter(mlda, agecell &gt;= 20, agecell &lt;= 22)) ) out &lt;- tibble( model = names(mods), ages = rep(c(&quot;19-22&quot;, &quot;20-21&quot;), each = 2), trend = rep(c(&quot;Linear&quot;, &quot;Quadratic&quot;), 2), model_num = seq_along(mods) ) %&gt;% bind_cols( select(filter(map_df(mods, tidy), term == &quot;over21&quot;), estimate, std.error)) %&gt;% mutate(response = y) out[[&quot;df.residual&quot;]] &lt;- map_dfr(mods, glance)[[&quot;df.residual&quot;]] out } mlda_regs &lt;- map_dfr(responses, run_reg) mlda_regs %&gt;% select(model, response, estimate, std.error) %&gt;% gather(stat, value, estimate, std.error) %&gt;% spread(model, value) #&gt; # A tibble: 12 x 6 #&gt; response stat `Ages 19-22, Line… `Ages 19-22, Quad… `Ages 20-21, Lin… #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 alcohol estima… 0.442 0.799 0.740 #&gt; 2 alcohol std.er… 0.152 0.222 0.227 #&gt; 3 ext_oth estima… 0.838 1.80 1.41 #&gt; 4 ext_oth std.er… 0.489 0.724 0.636 #&gt; 5 homicide estima… 0.104 0.200 0.164 #&gt; 6 homicide std.er… 0.345 0.522 0.517 #&gt; # ... with 6 more rows, and 1 more variable: `Ages 20-21, Quadratic` &lt;dbl&gt; Gabriel Kreindler, June 13, 2014; Modified (lightly) by Jon Petkun, January 20, 2015.↩ "],
["bank-failures.html", "4 “Bank Failures”", " 4 “Bank Failures” Richardson and Troost bank failure data and results, which produce Figures 5.1–5.3 in Mastering Metrics. Derived from the master_banks.do file. Also see the associated documentation. library(&quot;tidyverse&quot;) #&gt; ── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ── #&gt; ✔ ggplot2 2.2.1 ✔ purrr 0.2.4 #&gt; ✔ tibble 1.4.2 ✔ dplyr 0.7.4 #&gt; ✔ tidyr 0.8.0 ✔ stringr 1.3.0 #&gt; ✔ readr 1.1.1 ✔ forcats 0.3.0 #&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #&gt; ✖ dplyr::filter() masks stats::filter() #&gt; ✖ dplyr::lag() masks stats::lag() library(&quot;lubridate&quot;) #&gt; Loading required package: methods #&gt; #&gt; Attaching package: &#39;lubridate&#39; #&gt; The following object is masked from &#39;package:base&#39;: #&gt; #&gt; date Read the input data, banks.csv filename &lt;- here::here(&quot;data&quot;, &quot;banks.csv&quot;) col_types &lt;- cols( date = col_integer(), weekday = col_character(), day = col_integer(), month = col_integer(), year = col_integer(), bib6 = col_integer(), bio6 = col_integer(), bib8 = col_integer(), bio8 = col_integer() ) banks &lt;- read_csv(filename, na = &quot;&quot;, col_types = col_types) %&gt;% filter(month == 7L, day == 1L) %&gt;% select(year, matches(&quot;bi[ob][68]&quot;)) %&gt;% arrange(year) %&gt;% mutate(diff86 = bib8[year == 1930] - bib6[year == 1930], counterfactual = if_else(year &gt; 1930, bib8 - diff86, bib6)) glimpse(banks) #&gt; Observations: 6 #&gt; Variables: 7 #&gt; $ year &lt;int&gt; 1929, 1930, 1931, 1932, 1933, 1934 #&gt; $ bib6 &lt;int&gt; 141, 135, 121, 113, 102, 102 #&gt; $ bio6 &lt;int&gt; 141, 135, 121, 111, 100, 102 #&gt; $ bib8 &lt;int&gt; 169, 165, 132, 120, 111, 109 #&gt; $ bio8 &lt;int&gt; 169, 165, 130, 118, 110, 108 #&gt; $ diff86 &lt;int&gt; 30, 30, 30, 30, 30, 30 #&gt; $ counterfactual &lt;int&gt; 141, 135, 102, 90, 81, 79 Plot the lines of the 8th, 6th, and 6th counterfactuals. select(banks, year, bib8, bib6, counterfactual) %&gt;% gather(variable, value, -year) %&gt;% mutate(variable = recode(variable, bib8 = &quot;8th district&quot;, bib6 = &quot;6th district&quot;, counterfactual = &quot;Counterfactual&quot;)) %&gt;% ggplot(aes(x = year, y = value, colour = variable)) + geom_point() + geom_line() + ylab(&quot;Number of Banks in Business&quot;) + xlab(&quot;&quot;) Difference in difference estimate over years, ggplot(filter(banks, year &gt; 1930), aes(x = year, y = bib6 - counterfactual)) + geom_point() + geom_line() + ylab(&quot;DID (Number of Banks)&quot;) + xlab(&quot;&quot;) "],
["mlda-difference-in-difference.html", "5 MLDA Difference-in-Difference 5.1 Table 5.2 5.2 Table 5.3", " 5 MLDA Difference-in-Difference Derived from analysis.do. This program generates Tables 5.2 and 5.3 in Mastering ’Metrics. Load necessary libraries. library(&quot;tidyverse&quot;) library(&quot;haven&quot;) library(&quot;rlang&quot;) #&gt; #&gt; Attaching package: &#39;rlang&#39; #&gt; The following objects are masked from &#39;package:purrr&#39;: #&gt; #&gt; %@%, %||%, as_function, flatten, flatten_chr, flatten_dbl, #&gt; flatten_int, flatten_lgl, invoke, list_along, modify, prepend, #&gt; rep_along, splice library(&quot;broom&quot;) deaths_file &lt;- here::here(&quot;data&quot;, &quot;deaths.dta&quot;) deaths &lt;- read_dta(deaths_file) %&gt;% mutate_if(is.labelled, as_factor) %&gt;% mutate(state = as.factor(state)) glimpse(deaths) #&gt; Observations: 24,786 #&gt; Variables: 15 #&gt; $ year &lt;dbl&gt; 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1... #&gt; $ state &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1... #&gt; $ legal1820 &lt;dbl&gt; 0.000, 0.000, 0.000, 0.000, 0.000, 0.294, 0.665, ... #&gt; $ dtype &lt;fct&gt; all, all, all, all, all, all, all, all, all, all,... #&gt; $ agegr &lt;fct&gt; 15-17 yrs, 15-17 yrs, 15-17 yrs, 15-17 yrs, 15-17... #&gt; $ count &lt;dbl&gt; 224, 241, 270, 258, 224, 207, 231, 219, 234, 176,... #&gt; $ pop &lt;dbl&gt; 213574, 220026, 224877, 227256, 229025, 229739, 2... #&gt; $ age &lt;dbl&gt; 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1... #&gt; $ legal &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... #&gt; $ beertaxa &lt;dbl&gt; 1.374, 1.316, 1.275, 1.200, 1.081, 0.991, 0.937, ... #&gt; $ beerpercap &lt;dbl&gt; 0.60, 0.66, 0.74, 0.79, 0.83, 0.88, 0.89, 0.99, 0... #&gt; $ winepercap &lt;dbl&gt; 0.09, 0.09, 0.09, 0.10, 0.16, 0.16, 0.15, 0.13, 0... #&gt; $ spiritpercap &lt;dbl&gt; 0.70, 0.76, 0.78, 0.79, 0.81, 0.85, 0.86, 0.84, 0... #&gt; $ totpercap &lt;dbl&gt; 1.38, 1.52, 1.61, 1.69, 1.80, 1.88, 1.89, 1.96, 1... #&gt; $ mrate &lt;dbl&gt; 104.9, 109.5, 120.1, 113.5, 97.8, 90.1, 100.1, 95... 5.1 Table 5.2 Regression DD Estimates of MLDA-Induced Deaths among 18-20 Year Olds, from 1970-1983 dtypes &lt;- c(&quot;all&quot;, &quot;MVA&quot;, &quot;suicide&quot;, &quot;homicide&quot;) run_reg &lt;- function(i) { data &lt;- filter(deaths, year &lt;= 1983, agegr == &quot;18-20 yrs&quot;, dtype == i) mods &lt;- list( &quot;No trends, no weights&quot; = lm(mrate ~ legal + state + year, data = mutate(data, year = factor(year))), &quot;Time trends, no weights&quot; = lm(mrate ~ legal + state * year, data = data), &quot;No trends, weights&quot; = lm(mrate ~ legal + state + year, data = mutate(data, year = factor(year)), weights = data$pop), &quot;Time trends, weights&quot; = lm(mrate ~ legal + state * year, data = data, weights = data$pop) ) map_df(mods, tidy) %&gt;% filter(term == &quot;legal&quot;) %&gt;% select(estimate, std.error) %&gt;% mutate(response = i, model = names(mods)) } TODO: need to add clustering by state mlda_dd &lt;- map_df(dtypes, run_reg) 5.2 Table 5.3 Regression DD Estimates of MLDA-Induced Deaths among 18-20 Year Olds, from 1970-1983, controlling for Beer Taxes run_reg &lt;- function(i) { data &lt;- filter(deaths, year &lt;= 1983, agegr == &quot;18-20 yrs&quot;, dtype == i) mods &lt;- list( &quot;No time trends&quot; = lm(mrate ~ legal + beertax + state + year, data = mutate(data, year = factor(year))), &quot;Time trends&quot; = lm(mrate ~ legal + beertax + state * year, data = data), ) map_df(mods, tidy) %&gt;% filter(term == &quot;legal&quot;) %&gt;% select(estimate, std.error) %&gt;% mutate(response = i, model = names(mods)) } "]
]
