[
["index.html", "R Code for Mastering ’Metrics Welcome Install License Colonophon", " R Code for Mastering ’Metrics Jeffrey B. Arnold Calvin H. Garner Welcome This work contains R code to reproduce many of the analyses in Mastering ’Metrics by Joshua D. Angrist and Jörn-Steffen Pischke (Angrist and Pischke 2014). This work provides R translations of the replication code available at masteringmetrics.com. Install To install all packages used in the examples in this work and the datasets from Mastering ’Metrics run devtools::install_github(&quot;jrnold/masteringmetrics&quot;, subdir = &quot;masteringmetrics&quot;) License The text of this work is licensed under the Creative Commons Attribution 4.0 International License. The R Code in this work is licensed under the MIT License. Colonophon The book is powered by https://bookdown.org which makes it easy to turn R markdown files into HTML, PDF, and EPUB. This book was built with: devtools::session_info(c(&quot;tidyverse&quot;)) #&gt; Session info ------------------------------------------------------------- #&gt; setting value #&gt; version R version 3.4.4 (2018-03-15) #&gt; system x86_64, darwin15.6.0 #&gt; ui X11 #&gt; language (EN) #&gt; collate en_US.UTF-8 #&gt; tz America/Los_Angeles #&gt; date 2018-03-31 #&gt; Packages ----------------------------------------------------------------- #&gt; package * version date source #&gt; assertthat 0.2.0 2017-04-11 CRAN (R 3.4.0) #&gt; backports 1.1.2 2017-12-13 CRAN (R 3.4.3) #&gt; base64enc 0.1-3 2015-07-28 CRAN (R 3.4.0) #&gt; BH 1.66.0-1 2018-02-13 CRAN (R 3.4.3) #&gt; bindr 0.1.1 2018-03-13 CRAN (R 3.4.4) #&gt; bindrcpp 0.2 2017-06-17 CRAN (R 3.4.0) #&gt; broom 0.4.4 2018-03-29 cran (@0.4.4) #&gt; callr 2.0.2 2018-02-11 CRAN (R 3.4.3) #&gt; cellranger 1.1.0 2016-07-27 CRAN (R 3.4.0) #&gt; cli 1.0.0 2017-11-05 cran (@1.0.0) #&gt; colorspace 1.3-2 2016-12-14 CRAN (R 3.4.0) #&gt; compiler 3.4.4 2018-03-15 local #&gt; crayon 1.3.4 2017-09-16 CRAN (R 3.4.1) #&gt; curl 3.1 2017-12-12 CRAN (R 3.4.3) #&gt; DBI 0.8 2018-03-02 CRAN (R 3.4.3) #&gt; dbplyr 1.2.1 2018-02-19 CRAN (R 3.4.3) #&gt; debugme 1.1.0 2017-10-22 CRAN (R 3.4.2) #&gt; dichromat 2.0-0 2013-01-24 CRAN (R 3.4.0) #&gt; digest 0.6.15 2018-01-28 CRAN (R 3.4.3) #&gt; dplyr 0.7.4 2017-09-28 CRAN (R 3.4.2) #&gt; evaluate 0.10.1 2017-06-24 CRAN (R 3.4.1) #&gt; forcats 0.3.0 2018-02-19 CRAN (R 3.4.3) #&gt; foreign 0.8-69 2017-06-22 CRAN (R 3.4.4) #&gt; ggplot2 2.2.1 2016-12-30 CRAN (R 3.4.0) #&gt; glue 1.2.0 2017-10-29 CRAN (R 3.4.2) #&gt; graphics * 3.4.4 2018-03-15 local #&gt; grDevices * 3.4.4 2018-03-15 local #&gt; grid 3.4.4 2018-03-15 local #&gt; gtable 0.2.0 2016-02-26 CRAN (R 3.4.0) #&gt; haven 1.1.1.9000 2018-03-31 Github (tidyverse/haven@746eb3e) #&gt; highr 0.6 2016-05-09 CRAN (R 3.4.0) #&gt; hms 0.4.2 2018-03-10 CRAN (R 3.4.4) #&gt; htmltools 0.3.6 2017-04-28 CRAN (R 3.4.0) #&gt; httr 1.3.1 2017-08-20 CRAN (R 3.4.1) #&gt; jsonlite 1.5 2017-06-01 CRAN (R 3.4.0) #&gt; knitr 1.20 2018-02-20 CRAN (R 3.4.3) #&gt; labeling 0.3 2014-08-23 CRAN (R 3.4.0) #&gt; lattice 0.20-35 2017-03-25 CRAN (R 3.4.4) #&gt; lazyeval 0.2.1 2017-10-29 CRAN (R 3.4.2) #&gt; lubridate 1.7.3 2018-02-27 CRAN (R 3.4.3) #&gt; magrittr 1.5 2014-11-22 CRAN (R 3.4.0) #&gt; markdown 0.8 2017-04-20 CRAN (R 3.4.0) #&gt; MASS 7.3-49 2018-02-23 CRAN (R 3.4.3) #&gt; methods 3.4.4 2018-03-15 local #&gt; mime 0.5 2016-07-07 CRAN (R 3.4.0) #&gt; mnormt 1.5-5 2016-10-15 CRAN (R 3.4.0) #&gt; modelr 0.1.1 2017-07-24 CRAN (R 3.4.1) #&gt; munsell 0.4.3 2016-02-13 CRAN (R 3.4.0) #&gt; nlme 3.1-131.1 2018-02-16 CRAN (R 3.4.4) #&gt; openssl 1.0.1 2018-03-03 CRAN (R 3.4.3) #&gt; parallel 3.4.4 2018-03-15 local #&gt; pillar 1.2.1 2018-02-27 CRAN (R 3.4.3) #&gt; pkgconfig 2.0.1 2017-03-21 CRAN (R 3.4.0) #&gt; plogr 0.2.0 2018-03-25 CRAN (R 3.4.4) #&gt; plyr 1.8.4 2016-06-08 CRAN (R 3.4.0) #&gt; praise 1.0.0 2015-08-11 CRAN (R 3.4.0) #&gt; psych 1.7.8 2017-09-09 CRAN (R 3.4.1) #&gt; purrr 0.2.4 2017-10-18 cran (@0.2.4) #&gt; R6 2.2.2 2017-06-17 CRAN (R 3.4.0) #&gt; RColorBrewer 1.1-2 2014-12-07 CRAN (R 3.4.0) #&gt; Rcpp 0.12.16 2018-03-13 cran (@0.12.16) #&gt; readr 1.1.1 2017-05-16 CRAN (R 3.4.0) #&gt; readxl 1.0.0 2017-04-18 CRAN (R 3.4.0) #&gt; rematch 1.0.1 2016-04-21 CRAN (R 3.4.0) #&gt; reprex 0.1.2 2018-01-26 CRAN (R 3.4.3) #&gt; reshape2 1.4.3 2017-12-11 CRAN (R 3.4.3) #&gt; rlang 0.2.0 2018-02-20 CRAN (R 3.4.3) #&gt; rmarkdown 1.9 2018-03-01 CRAN (R 3.4.3) #&gt; rprojroot 1.3-2 2018-01-03 CRAN (R 3.4.3) #&gt; rstudioapi 0.7 2017-09-07 CRAN (R 3.4.1) #&gt; rvest 0.3.2 2016-06-17 CRAN (R 3.4.0) #&gt; scales 0.5.0 2017-08-24 CRAN (R 3.4.1) #&gt; selectr 0.3-2 2018-03-05 CRAN (R 3.4.4) #&gt; stats * 3.4.4 2018-03-15 local #&gt; stringi 1.1.7 2018-03-12 CRAN (R 3.4.4) #&gt; stringr 1.3.0 2018-02-19 CRAN (R 3.4.3) #&gt; testthat 2.0.0 2017-12-13 CRAN (R 3.4.3) #&gt; tibble 1.4.2 2018-01-22 CRAN (R 3.4.3) #&gt; tidyr 0.8.0 2018-01-29 CRAN (R 3.4.3) #&gt; tidyselect 0.2.4 2018-02-26 CRAN (R 3.4.3) #&gt; tidyverse 1.2.1 2017-11-14 CRAN (R 3.4.2) #&gt; tools 3.4.4 2018-03-15 local #&gt; utf8 1.1.3 2018-01-03 CRAN (R 3.4.3) #&gt; utils * 3.4.4 2018-03-15 local #&gt; viridisLite 0.3.0 2018-02-01 CRAN (R 3.4.3) #&gt; whisker 0.3-2 2013-04-28 CRAN (R 3.4.0) #&gt; withr 2.1.2 2018-03-15 CRAN (R 3.4.4) #&gt; xml2 1.2.0 2018-01-24 CRAN (R 3.4.3) #&gt; yaml 2.1.18 2018-03-08 cran (@2.1.18) "],
["chapter-1-part.html", "1 Chapter 1 (PART)", " 1 Chapter 1 (PART) "],
["national-health-interview-survey.html", "2 National Health Interview Survey 2.1 References", " 2 National Health Interview Survey This reproduces the analyses in Table 1.1 of Angrist and Pischke (2014). which compares people with and without health insurance in the 2009 National Health Interview Survey (NHIS). The code is derived from NHIS2009_hicompare.do. Load the prerequisite packages. library(&quot;tidyverse&quot;) library(&quot;magrittr&quot;) library(&quot;haven&quot;) Load the data (originally from http://masteringmetrics.com/wp-content/uploads/2015/01/Data.zip), and adjust a few of the columns to account for differences in how STATA and R store data. data(&quot;NHIS2009&quot;, package = &quot;masteringmetrics&quot;) Remove missing values. NHIS2009 &lt;- NHIS2009 %&gt;% filter(marradult, perweight != 0) %&gt;% group_by(serial) %&gt;% mutate(hi_hsb = mean(hi_hsb1, na.rm = TRUE)) %&gt;% filter(!is.na(hi_hsb), !is.na(hi)) %&gt;% mutate(female = sum(fml)) %&gt;% filter(female == 1) %&gt;% select(-female) For the sample only include married adults between 26 and 59 in age, and remove single person households. NHIS2009 &lt;- NHIS2009 %&gt;% filter(between(age, 26, 59), marradult, adltempl &gt;= 1) Keep only single family households. NHIS2009 &lt;- NHIS2009 %&gt;% group_by(serial) %&gt;% filter(length(serial) &gt; 1L) %&gt;% ungroup() Tables of wives and husbands by health insurance. status. The weighting following the “analytic” weights in the original .do file which weights observations by perweight and normalizes the weights so that the sub-samples of males and females have the same number as the original sample. NHIS2009 %&gt;% group_by(fml) %&gt;% # normalize person weights to match number of observations in each # group mutate(perweight = perweight / sum(perweight) * n()) %&gt;% group_by(fml, hi) %&gt;% summarise(n_wt = sum(perweight)) %&gt;% group_by(fml) %&gt;% mutate(prop = n_wt / sum(n_wt)) #&gt; # A tibble: 4 x 4 #&gt; # Groups: fml [2] #&gt; fml hi n_wt prop #&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 FALSE 0. 1281. 0.136 #&gt; 2 FALSE 1. 8114. 0.864 #&gt; 3 TRUE 0. 1131. 0.120 #&gt; 4 TRUE 1. 8264. 0.880 Compare sample statistics of mean and women, with and without health insurance. varlist &lt;- c(&quot;hlth&quot;, &quot;nwhite&quot;, &quot;age&quot;, &quot;yedu&quot;, &quot;famsize&quot;, &quot;empl&quot;, &quot;inc&quot;) NHIS2009_diff &lt;- NHIS2009 %&gt;% # rlang::set_attrs with NULL removes attributes from columns. # this avoids a warning from gather about differing attributes map_dfc(~ rlang::set_attrs(.x, NULL)) %&gt;% select(fml, hi, one_of(varlist)) %&gt;% gather(variable, value, -fml, -hi) %&gt;% group_by(fml, hi, variable) %&gt;% summarise(mean = mean(value, na.rm = TRUE), sd = sd(value, na.rm = TRUE)) %&gt;% gather(stat, value, -fml, -hi, -variable) %&gt;% unite(stat_hi, stat, hi) %&gt;% spread(stat_hi, value) %&gt;% mutate(diff = mean_1 - mean_0) knitr::kable(NHIS2009_diff, digits = 3) fml variable mean_0 mean_1 sd_0 sd_1 diff FALSE age 4.13e+01 4.42e+01 8.40e+00 8.61e+00 2.893 FALSE empl 8.52e-01 9.22e-01 3.55e-01 2.68e-01 0.070 FALSE famsize 4.06e+00 3.55e+00 1.54e+00 1.32e+00 -0.506 FALSE hlth 3.70e+00 3.98e+00 1.01e+00 9.34e-01 0.278 FALSE inc 4.36e+04 1.04e+05 3.57e+04 5.48e+04 60366.415 FALSE nwhite 1.88e-01 2.00e-01 3.91e-01 4.00e-01 0.011 FALSE yedu 1.12e+01 1.41e+01 3.47e+00 2.68e+00 2.919 TRUE age 3.95e+01 4.22e+01 8.26e+00 8.65e+00 2.631 TRUE empl 5.41e-01 7.58e-01 4.98e-01 4.29e-01 0.216 TRUE famsize 4.07e+00 3.55e+00 1.54e+00 1.32e+00 -0.520 TRUE hlth 3.61e+00 3.99e+00 1.02e+00 9.28e-01 0.382 TRUE inc 4.36e+04 1.03e+05 3.52e+04 5.51e+04 59722.242 TRUE nwhite 1.83e-01 2.02e-01 3.87e-01 4.01e-01 0.018 TRUE yedu 1.14e+01 1.43e+01 3.50e+00 2.60e+00 2.913 2.1 References http://masteringmetrics.com/wp-content/uploads/2014/12/ReadMe_NHIS.txt http://masteringmetrics.com/wp-content/uploads/2015/01/NHIS2009_hicompare.do "],
["rand-health-insurance-experiment-hie.html", "3 RAND Health Insurance Experiment (HIE) 3.1 Table 1.3 3.2 Table 1.4 References", " 3 RAND Health Insurance Experiment (HIE) This provides code replicates the Tables 1.3 and 1.4 of Angrist and Pischke (2014) which replicate the analyses from the RAND Health Insurance Experiment (Brook et al. 1983,@Aron-DineEinavEtAl2013). Load necessary libraries. library(&quot;tidyverse&quot;) library(&quot;broom&quot;) library(&quot;haven&quot;) library(&quot;rlang&quot;) library(&quot;clubSandwich&quot;) 3.1 Table 1.3 Table 1.3 presents demographic and baseline health characteristics for subjects of the RAND Health Insurance Experiment (HIE). Load the rand data. data(&quot;rand_sample&quot;, package = &quot;masteringmetrics&quot;) Calculate the number in each plan: plantypes &lt;- count(rand_sample, plantype) knitr::kable(plantypes) plantype n Catastrophic 759 Deductible 881 Coinsurance 1022 Free 1295 For variables, difference in means between plantypes varlist &lt;- c(&quot;female&quot;, &quot;blackhisp&quot;, &quot;age&quot;, &quot;educper&quot;, &quot;income1cpi&quot;, &quot;hosp&quot;, &quot;ghindx&quot;, &quot;cholest&quot;, &quot;diastol&quot;, &quot;systol&quot;, &quot;mhi&quot;, &quot;ghindxx&quot;, &quot;cholestx&quot;, &quot;diastolx&quot;, &quot;systolx&quot;, &quot;mhix&quot;) Create column (1) with the mean and standard deviation of the “Catastrophic” plan, catastrophic_stats &lt;- rand_sample %&gt;% filter(plantype == &quot;Catastrophic&quot;) %&gt;% select(one_of(varlist)) %&gt;% gather(variable, value) %&gt;% group_by(variable) %&gt;% summarise(Mean = mean(value, na.rm = TRUE), `Std. Dev.` = sd(value, na.rm = TRUE)) knitr::kable(catastrophic_stats, digits = 3) variable Mean Std. Dev. age 3.24e+01 1.29e+01 blackhisp 1.72e-01 3.77e-01 cholest 2.07e+02 3.99e+01 cholestx 2.03e+02 4.21e+01 diastol 7.48e+01 1.10e+01 diastolx 7.88e+01 1.20e+01 educper 1.21e+01 2.88e+00 female 5.60e-01 4.97e-01 ghindx 7.09e+01 1.49e+01 ghindxx 6.85e+01 1.59e+01 hosp 1.15e-01 3.20e-01 income1cpi 3.16e+04 1.81e+04 mhi 7.38e+01 1.43e+01 mhix 7.55e+01 1.48e+01 systol 1.22e+02 1.65e+01 systolx 1.22e+02 1.87e+01 The difference in means between plans and the catastophic plan. calc_diffs &lt;- function(x) { # programmatically create the formula f &lt;- quo(!!sym(x) ~ plantype) # this would also work # f &lt;- as.formula(str_c(x, &quot; ~ plantype_1 + plantype_2 + plantype_3&quot;)) mod &lt;- lm(f, data = rand_sample) out &lt;- tidy(mod) out[[&quot;response&quot;]] &lt;- x out } plantype_diffs &lt;- map_dfr(varlist, calc_diffs) %&gt;% select(response, term, estimate, std.error) %&gt;% mutate(term = str_replace(term, &quot;^plantype&quot;, &quot;&quot;)) Note: the above code currently does not cluster by family ID as in the original analysis so the standard errors will be different. Print the table. This could be done much nicer, … but for now. fmt_num &lt;- function(x) { prettyNum(x, digits = 3, format = &quot;f&quot;, big.mark = &quot;,&quot;, drop0trailing = FALSE) } plantype_diffs %&gt;% mutate(estimate = str_c(fmt_num(estimate), &quot; (&quot;, fmt_num(std.error), &quot;)&quot;)) %&gt;% select(-std.error) %&gt;% spread(term, estimate) %&gt;% knitr::kable(digits = 3) response (Intercept) Coinsurance Deductible Free age 32.4 (0.479) 0.966 (0.632) 0.561 (0.654) 0.435 (0.603) blackhisp 0.172 (0.0146) -0.0269 (0.0192) -0.0188 (0.0199) -0.0281 (0.0186) cholest 207 (2.07) -1.93 (2.76) -1.42 (2.82) -5.25 (2.59) cholestx 203 (1.77) -2.31 (2.3) 0.691 (2.4) -1.83 (2.19) diastol 74.8 (0.55) -0.514 (0.73) 1.22 (0.747) -0.143 (0.685) diastolx 78.8 (0.473) -0.335 (0.615) 0.219 (0.641) -1.03 (0.585) educper 12.1 (0.116) -0.0613 (0.153) -0.157 (0.157) -0.263 (0.146) female 0.56 (0.0181) -0.0247 (0.0239) -0.0231 (0.0247) -0.0379 (0.0228) ghindx 70.9 (0.651) 0.211 (0.863) -1.44 (0.844) -1.31 (0.801) ghindxx 68.5 (0.604) 0.612 (0.785) -0.869 (0.82) -0.776 (0.745) hosp 0.115 (0.0117) -0.00249 (0.0154) 0.00449 (0.0159) 0.00117 (0.0147) income1cpi 31,603 (651) 970 (857) -2,104 (891) -976 (819) mhi 73.8 (0.515) 1.19 (0.677) -0.12 (0.7) 0.89 (0.648) mhix 75.5 (0.542) 1.07 (0.705) 0.454 (0.735) 0.433 (0.669) systol 122 (0.797) 0.907 (1.06) 2.32 (1.08) 1.12 (0.993) systolx 122 (0.715) -1.39 (0.929) 1.17 (0.969) -0.522 (0.885) Plot the difference-in-means of each plantype vs. catastrophic insurance. ggplot(filter(plantype_diffs, term != &quot;(Intercept)&quot;), aes(x = term, y = estimate, ymin = estimate - 2 * std.error, ymax = estimate + 2 * std.error)) + geom_hline(yintercept = 0, colour = &quot;white&quot;, size = 1) + geom_pointrange() + facet_grid(response ~ . , scales = &quot;free_y&quot;) 3.2 Table 1.4 Table 1.4 presents health outcome and health expenditure results from the RAND HIE. data(&quot;rand_person_spend&quot;, package = &quot;masteringmetrics&quot;) correlate year variable from annual expenditures data to correct calendar year in order to adjust for inflation. rand_person_spend &lt;- mutate(rand_person_spend, expyear = indv_start_year + year - 1) Adjust spending for inflation. The CPI adjustment values below are based on the June CPI from 1991 (see table found at http://www.seattle.gov/financedepartment/cpi/historical.htm ). cpi &lt;- tribble( ~ year, ~ cpi, 1973, 3.07, 1974, 2.76, 1975, 2.53, 1976, 2.39, 1977, 2.24, 1978, 2.09, 1979, 1.88, 1980, 1.65, 1981, 1.5, 1982, 1.41, 1983, 1.37, 1984, 1.31, 1985, 1.27 ) rand_person_spend &lt;- left_join(rand_person_spend, cpi, by = c(&quot;expyear&quot; = &quot;year&quot;)) %&gt;% mutate(out_inf = outsum * cpi, inpdol_inf = inpdol * cpi) Add a total spending variable. rand_person_spend &lt;- mutate(rand_person_spend, tot_inf = inpdol_inf + out_inf) Add a variable for any health insurance (free, Individual deductible, or cost-sharing): rand_person_spend &lt;- mutate(rand_person_spend, any_ins = plantype != &quot;Catastrophic&quot;) Count the number of observations in each plan-type, count(rand_person_spend, plantype) #&gt; # A tibble: 4 x 2 #&gt; plantype n #&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Catastrophic 3724 #&gt; 2 Deductible 4175 #&gt; 3 Cost Sharing 5464 #&gt; 4 Free 6840 and any-insurance, count(rand_person_spend, any_ins) #&gt; # A tibble: 2 x 2 #&gt; any_ins n #&gt; &lt;lgl&gt; &lt;int&gt; #&gt; 1 FALSE 3724 #&gt; 2 TRUE 16479 Create a list of response variables. varlist &lt;- c(&quot;ftf&quot;, &quot;out_inf&quot;, &quot;totadm&quot;, &quot;inpdol_inf&quot;, &quot;tot_inf&quot;) Mean and standard deviation for those receiving catastrophic insurance, rand_person_spend %&gt;% filter(plantype == &quot;Catastrophic&quot;) %&gt;% select(one_of(varlist)) %&gt;% gather(response, value) %&gt;% group_by(response) %&gt;% summarise(Mean = mean(value, na.rm = TRUE), `Std. Dev.` = sd(value, na.rm = TRUE)) #&gt; # A tibble: 5 x 3 #&gt; response Mean `Std. Dev.` #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 ftf 2.78 5.50 #&gt; 2 inpdol_inf 388. 2308. #&gt; 3 out_inf 248. 488. #&gt; 4 tot_inf 636. 2535. #&gt; 5 totadm 0.0991 0.379 Calculate the difference in means between plans and the catastophic plan. calc_diffs &lt;- function(x) { # programmatically create the formula f &lt;- quo_squash(quo(!!sym(x) ~ plantype)) # this would also work # f &lt;- as.formula(str_c(x, &quot; ~ plantype_1 + plantype_2 + plantype_3&quot;)) mod &lt;- lm(f, data = rand_person_spend) out &lt;- tidy(mod) out[[&quot;response&quot;]] &lt;- x out } person_diffs &lt;- map_dfr(varlist, calc_diffs) %&gt;% select(response, term, estimate, std.error) %&gt;% mutate(term = str_replace(term, &quot;^plantype&quot;, &quot;&quot;)) Note: the above code currently does not cluster by family identifier as in the original analysis so the standard errors will be different. Print the table. If this were an actual publication, I’d make it nicer. fmt_num &lt;- function(x) { prettyNum(x, digits = 3, format = &quot;f&quot;, big.mark = &quot;,&quot;, drop0trailing = FALSE) } person_diffs %&gt;% mutate(estimate = str_c(fmt_num(estimate), &quot; (&quot;, fmt_num(std.error), &quot;)&quot;)) %&gt;% select(-std.error) %&gt;% spread(term, estimate) %&gt;% knitr::kable(digits = 3) response (Intercept) Cost Sharing Deductible Free ftf 2.78 (0.103) 0.481 (0.134) 0.193 (0.142) 1.66 (0.128) inpdol_inf 388 (49.5) 92.5 (64.2) 72.2 (68.1) 116 (61.6) out_inf 248 (9.11) 59.8 (11.8) 41.8 (12.5) 169 (11.3) tot_inf 636 (52.8) 152 (68.5) 114 (72.6) 285 (65.6) totadm 0.0991 (0.00674) 0.0023 (0.00873) 0.0159 (0.00927) 0.0288 (0.00837) Additionally we could plot the difference-in-means of each plantype vs. catastrophic insurance. ggplot(filter(person_diffs, term != &quot;(Intercept)&quot;), aes(x = term, y = estimate, ymin = estimate - 2 * std.error, ymax = estimate + 2 * std.error)) + geom_hline(yintercept = 0, colour = &quot;white&quot;, size = 1) + geom_pointrange() + facet_grid(response ~ . , scales = &quot;free_y&quot;) References https://www.icpsr.umich.edu/icpsrweb/NACDA/studies/6439/version/1 http://masteringmetrics.com/wp-content/uploads/2015/01/ReadMe_RAND.txt http://masteringmetrics.com/wp-content/uploads/2015/01/Code.zip "]
]
